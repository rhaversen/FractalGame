// Post-process mandelbulb fractal rendering shader functions for use in material custom node

#define FRACTAL_MARCH_MAX_STEPS 200 // How many steps to take before giving up
#define FRACTAL_MARCH_MAX_DISTANCE 500.0 // How far to march before giving up
#define FRACTAL_DE_MAX_ITER 25 // How many iterations the fractal grows for distance estimate
#define FRACTAL_DE_BAILOUT 10.0 // How far from the origin the fractal can grow

#define FRACTAL_TYPE_MANDELBULB 0
#define FRACTAL_TYPE_BURNING_SHIP 1
#define FRACTAL_TYPE_JULIA_SET 2
#define FRACTAL_TYPE_MANDELBOX 3
#define FRACTAL_TYPE_MENGER_SPONGE 4
#define FRACTAL_TYPE_SIERPINSKI 5

#define HIT_STATUS_NONE 0
#define HIT_STATUS_HIT 1
#define HIT_STATUS_MISS_DISTANCE 2
#define HIT_STATUS_MISS_STEPS 3

struct MarchResult
{
	float distance;
	int steps;
	int hitStatus;
};

struct FractalFunctions
{
	// Convert Cartesian coordinates to spherical
	static void CartesianToSpherical(in float3 z, out float r, out float theta, out float phi)
	{
		r = length(z);
		theta = acos(z.z / r);
		phi = atan2(z.y, z.x);
	}

	// Convert spherical coordinates back to Cartesian
	static float3 SphericalToCartesian(float r, float theta, float phi)
	{
		float sinTheta = sin(theta);
		return r * float3(sinTheta * cos(phi), sinTheta * sin(phi), cos(theta));
	}

	// Apply power rotation in spherical domain
	static void RotateSpherical(inout float theta, inout float phi, float power)
	{
		theta *= power;
		phi *= power;
	}

	// Final distance estimate calculation
	static float FinalDE(float r, float dr)
	{
		return 0.5 * log(r) * r / dr;
	}

	// Computes the world-space radius that a sphere must have to appear 1 pixel tall on screen at a given distance.
	static float GetPixelWorldRadius(float distance)
	{
		// This is derived from the projection formula: pixel_size = (world_radius / distance) * screen_height / tan(fov/2)
		// Solving for world_radius when pixel_size = 1 gives:
		return distance * ResolvedView.ClipToView._22 / ResolvedView.ViewSizeAndInvSize.y;
	}

	static float FractalDE(float3 pos, int fractalType, float power)
	{
		if (fractalType == FRACTAL_TYPE_MANDELBULB)
		{
			return MandelbulbDE(pos, power);
		}
		else if (fractalType == FRACTAL_TYPE_BURNING_SHIP)
		{
			return BurningShipDE(pos, power);
		}
		else if (fractalType == FRACTAL_TYPE_JULIA_SET)
		{
			return JuliaSetDE(pos, power);
		}
		else if (fractalType == FRACTAL_TYPE_MANDELBOX)
		{
			return MandelboxDE(pos, power);
		}
		else if (fractalType == FRACTAL_TYPE_MENGER_SPONGE)
		{
			return MengerSpongeDE(pos);
		}
		else if (fractalType == FRACTAL_TYPE_SIERPINSKI)
		{
			return SierpinskiDE(pos);
		}
		
		return MandelbulbDE(pos, power);
	}

	// Marching function that can do cone marching (subdivisionFactor > 0) or ray marching (subdivisionFactor = 0)
	// subdivisionFactor: 0 = precise ray marching, >0 = cone marching with that many pixels bundled
	// startDistance & startSteps: allows continuing from where a previous march left off
	static MarchResult MarchFractal(float3 RayOrigin, float3 RayDir, int fractalType, float power)
	{
		float totalDist = 0.0;
		int steps = 0;

		while (totalDist < FRACTAL_MARCH_MAX_DISTANCE && steps < FRACTAL_MARCH_MAX_STEPS)
		{
			steps++;
			float3 pos = RayOrigin + RayDir * totalDist;
			float distEstimate = FractalDE(pos, fractalType, power);

			// Calculate precision threshold based on whether we're cone marching or ray marching
			float pixelSize = GetPixelWorldRadius(totalDist);
			float threshold = pixelSize;

			// Check if we've hit the fractal
			if (distEstimate <= threshold)
			{
				MarchResult result;
				result.distance = totalDist;
				result.steps = steps;
				result.hitStatus = HIT_STATUS_HIT;
				return result;
			}

			// Advance by the distance estimate, with minimum step to avoid precision issues
			float stepSize = max(deResult.distance, pixelSize * 0.5); // Never step smaller than half a pixel
			totalDist += stepSize;
		}

		MarchResult result;
		result.distance = totalDist;
		result.steps = steps;
		result.hitStatus = (totalDist >= FRACTAL_MARCH_MAX_DISTANCE) ? HIT_STATUS_MISS_DISTANCE : HIT_STATUS_MISS_STEPS;
		return result;
	}


	static float3 RenderFractal(float2 screenUV, float3 sceneColor, int fractalType, float power)
	{
		// Get camera parameters
		float3 cameraOrigin = LWCHackToFloat(ResolvedView.WorldCameraOrigin);

		// Convert screen UV to clip space
		float2 clipXY = screenUV * 2.0 - 1.0;
		clipXY.y = -clipXY.y; // Flip Y for clip space

		float4 clipPos = float4(clipXY, 1.0, 1.0);
		float4 viewPos = mul(clipPos, ResolvedView.ClipToView);
		viewPos.xyz /= viewPos.w;

		// Transform view direction to world space
		float3 worldDir = normalize(mul(viewPos.xyz, (float3x3)ResolvedView.ViewToTranslatedWorld));

		// Scale down the camera origin for better framing
		float3 rayOrigin = cameraOrigin * 0.001;
		float3 rayDir = worldDir;

		// Ray march
		MarchResult finalResult = MarchFractal(rayOrigin, rayDir, fractalType, power);

		// Calculate color based on total steps taken
		float stepFactor = saturate(finalResult.steps / float(FRACTAL_MARCH_MAX_STEPS));
		float t = sqrt(stepFactor);
		
		// Gradient color stops: position -> color
		float  almostBlackPos = 0.0;   float3 almostBlack = float3(0.0, 0.0, 0.05);    // Very few steps
		float  deepBluePos = 0.15;     float3 deepBlue = float3(0.05, 0.15, 0.3);      // Low detail areas
		float  vibrantBluePos = 0.4;   float3 vibrantBlue = float3(0.2, 0.4, 0.8);     // Medium detail
		float  brightBluePos = 1.0;    float3 brightBlue = float3(0.6, 0.8, 1.0);      // Many steps
		
		// Blend through gradient stops
		float range1 = saturate((t - almostBlackPos) / (deepBluePos - almostBlackPos));
		float range2 = saturate((t - deepBluePos) / (vibrantBluePos - deepBluePos));
		float range3 = saturate((t - vibrantBluePos) / (brightBluePos - vibrantBluePos));
		float3 fractalColor = lerp(lerp(lerp(almostBlack, deepBlue, range1), vibrantBlue, range2), brightBlue, range3);

		if (finalResult.hitStatus == HIT_STATUS_HIT)
		{
			// Direct hit: show fractal color
			return fractalColor;
		}
		else if (finalResult.hitStatus == HIT_STATUS_MISS_DISTANCE)
		{
			// Missed due to distance: blend fractal color with scene color based on steps taken
			float fogAmount = pow(stepFactor, 0.1);
			return lerp(sceneColor, fractalColor, fogAmount);
		}
		else if (finalResult.hitStatus == HIT_STATUS_MISS_STEPS)
		{
			// Missed due to max steps: show fractal color (TODO: Find a better way to handle this case, use depth?)
			return fractalColor;
		}
		else
		{
			// Should not happen, fallback to scene color
			return sceneColor;
		}
	}

	static float MandelbulbDE(float3 pos, float power)
	{
		float3 z = pos;
		float dr = 1.0;
		float r = 0.0;

		for (int i = 0; i < FRACTAL_DE_MAX_ITER; i++)
		{
			r = length(z);
			if (r > FRACTAL_DE_BAILOUT)
				break;

			float theta = acos(z.z / r);
			float phi = atan2(z.y, z.x);
			dr = pow(r, power - 1.0) * power * dr + 1.0;

			float zr = pow(r, power);
			RotateSpherical(theta, phi, power);
			z = SphericalToCartesian(zr, theta, phi);
			z += pos;
		}

		return FinalDE(r, dr);
	}

	static float BurningShipDE(float3 pos, float power)
	{
		float3 z = pos;
		float dr = 1.0;
		float r, theta, phi;

		for (int i = 0; i < FRACTAL_DE_MAX_ITER; i++)
		{
			z = abs(z);
			CartesianToSpherical(z, r, theta, phi);
			if (r > FRACTAL_DE_BAILOUT)
				break;

			dr = pow(r, power - 1.0) * power * dr + 1.0;
			float zr = pow(r, power);

			RotateSpherical(theta, phi, power);
			z = SphericalToCartesian(zr, theta, phi);
			z += pos;
		}

		return FinalDE(r, dr);
	}

	static float JuliaSetDE(float3 pos, float power)
	{
		float3 z = pos;
		float dr = 1.0;
		float r, theta, phi;
		float3 c = float3(-0.8, 0.156, 0.0);

		for (int i = 0; i < FRACTAL_DE_MAX_ITER; i++)
		{
			CartesianToSpherical(z, r, theta, phi);
			if (r > FRACTAL_DE_BAILOUT)
				break;

			dr = pow(r, power - 1.0) * power * dr + 1.0;
			float zr = pow(r, power);

			RotateSpherical(theta, phi, power);
			z = SphericalToCartesian(zr, theta, phi);
			z += c;
		}

		return FinalDE(r, dr);
	}

	static void BoxFold(inout float3 z, float foldingLimit)
	{
		z.x = clamp(z.x, -foldingLimit, foldingLimit) * 2.0 - z.x;
		z.y = clamp(z.y, -foldingLimit, foldingLimit) * 2.0 - z.y;
		z.z = clamp(z.z, -foldingLimit, foldingLimit) * 2.0 - z.z;
	}

	static void SphereFold(inout float3 z, inout float dz, float minRadius, float fixedRadius)
	{
		float r2 = dot(z, z);
		float minRadius2 = minRadius * minRadius;
		float fixedRadius2 = fixedRadius * fixedRadius;

		if (r2 < minRadius2)
		{
			float temp = fixedRadius2 / minRadius2;
			z *= temp;
			dz *= temp;
		}
		else if (r2 < fixedRadius2)
		{
			float temp = fixedRadius2 / r2;
			z *= temp;
			dz *= temp;
		}
	}

	static float MandelboxDE(float3 pos, float scale)
	{
		float3 z = pos;
		float dr = 1.0;
		const float foldingLimit = 1.0;
		const float minRadius = 0.5;
		const float fixedRadius = 1.0;

		for (int i = 0; i < FRACTAL_DE_MAX_ITER; i++)
		{
			BoxFold(z, foldingLimit);
			SphereFold(z, dr, minRadius, fixedRadius);

			z = z * scale + pos;
			dr = dr * abs(scale) + 1.0;

			if (length(z) > FRACTAL_DE_BAILOUT * FRACTAL_DE_BAILOUT)
			{
				break;
			}
		}

		float r = length(z);
		return r / abs(dr);
	}

	static float MengerSpongeDE(float3 pos)
	{
		float3 z = pos;
		float dr = 1.0;
		const float scale = 3.0;
		for (int i = 0; i < FRACTAL_DE_MAX_ITER; i++)
		{
			z = abs(z);
			if (z.x < z.y) z.xy = z.yx;
			if (z.x < z.z) z.xz = z.zx;
			if (z.y < z.z) z.yz = z.zy;
			z = z * scale - float3(2.0, 2.0, 2.0);
			dr *= scale;
		}
		float r = length(z);
		return r / dr;
	}

	static float SierpinskiDE(float3 pos)
	{
		float3 z = pos;
		float dr = 1.0;
		const float scale = 2.0;
		for (int i = 0; i < FRACTAL_DE_MAX_ITER; i++)
		{
			if (z.x + z.y < 0.0) z.xy = -z.yx;
			if (z.x + z.z < 0.0) z.xz = -z.zx;
			if (z.y + z.z < 0.0) z.yz = -z.zy;
			z = z * scale - float3(1.0, 1.0, 1.0);
			dr *= scale;
		}
		float r = length(z);
		return r / dr;
	}
};

// Usage in material custom node:
// #include "/Project/FractalMaterial.usf"
// FractalFunctions FF;
// return FF.RenderFractal(ScreenPosition, SceneColor, FractalType, Power).rgb;
//
// FractalType values:
// 0 = Mandelbulb
// 1 = Burning Ship
// 2 = Julia Set
// 3 = Mandelbox
// 4 = Menger Sponge
// 5 = Sierpinski