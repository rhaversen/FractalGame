// Post-process mandelbulb fractal rendering shader functions for use in material custom node

#define FRACTAL_MAX_STEPS 500
#define FRACTAL_MAX_DISTANCE 5.0
#define FRACTAL_POWER 8.0

#define HIT_STATUS_NONE 0
#define HIT_STATUS_HIT 1
#define HIT_STATUS_MISS_DISTANCE 2
#define HIT_STATUS_MISS_STEPS 3

struct MarchResult
{
	float distance;
	int steps;
	int hitStatus;
};

struct FractalFunctions
{
	// Computes the world-space radius that a sphere must have to appear 1 pixel tall on screen at a given distance.
	static float GetPixelWorldRadius(float distance)
	{
		// This is derived from the projection formula: pixel_size = (world_radius / distance) * screen_height / tan(fov/2)
		// Solving for world_radius when pixel_size = 1 gives:
		return distance * ResolvedView.ClipToView._22 / ResolvedView.ViewSizeAndInvSize.y;
	}

	// Calculates the Distance Estimate (DE) for a point in space to the Mandelbulb set.
	// The DE is the radius of a sphere centered at 'pos' that is guaranteed not to touch the fractal.
	// Based on: http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/
	static float FractalDE(float3 pos)
	{
		float3 z = pos;
		float dr = 1.0;
		float r = 0.0;
		float bailout = 2.0;
		int MaxIter = 100;

		for (int i = 0; i < MaxIter; i++)
		{
			r = length(z);
			if (r > bailout)
				break;

			// Convert to polar coordinates
			float theta = acos(z.z / r);
			float phi = atan2(z.y, z.x);
			dr = pow(r, FRACTAL_POWER - 1.0) * FRACTAL_POWER * dr + 1.0;

			// Scale and rotate the point
			float zr = pow(r, FRACTAL_POWER);
			theta *= FRACTAL_POWER;
			phi *= FRACTAL_POWER;

			// Convert back to cartesian coordinates
			z = zr * float3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
			z += pos;
		}

		return 0.5 * log(r) * r / dr;
	}

	// Marching function that can do cone marching (subdivisionFactor > 0) or ray marching (subdivisionFactor = 0)
	// subdivisionFactor: 0 = precise ray marching, >0 = cone marching with that many pixels bundled
	// startDistance & startSteps: allows continuing from where a previous march left off
	static MarchResult MarchFractal(float3 RayOrigin, float3 RayDir, float subdivisionFactor, float startDistance, int startSteps)
	{
		float totalDist = startDistance;
		int steps = startSteps;

		while (totalDist < FRACTAL_MAX_DISTANCE && steps < FRACTAL_MAX_STEPS)
		{
			steps++;
			float3 pos = RayOrigin + RayDir * totalDist;
			float distEstimate = FractalDE(pos);

			// Calculate precision threshold based on whether we're cone marching or ray marching
			float pixelSize = GetPixelWorldRadius(totalDist);
			float threshold;
			
			if (subdivisionFactor > 0.0)
			{
				// Cone marching: larger threshold based on cone radius
				threshold = pixelSize * subdivisionFactor;
			}
			else
			{
				// Ray marching: threshold is pixel size
				threshold = pixelSize;
			}

			// Check if we've hit the fractal
			if (distEstimate <= threshold)
			{
				MarchResult result;
				result.distance = totalDist;
				result.steps = steps;
				result.hitStatus = HIT_STATUS_HIT;
				return result;
			}

			// Advance by the distance estimate
			totalDist += distEstimate;
		}

		MarchResult result;
		result.distance = totalDist;
		result.steps = steps;
		result.hitStatus = (totalDist >= FRACTAL_MAX_DISTANCE) ? HIT_STATUS_MISS_DISTANCE : HIT_STATUS_MISS_STEPS;
		return result;
	}


	static float3 RenderFractal(float2 screenUV, float3 sceneColor)
	{
		// Get camera parameters
		float3 cameraOrigin = LWCHackToFloat(ResolvedView.WorldCameraOrigin);

		// Convert screen UV to clip space
		float2 clipXY = screenUV * 2.0 - 1.0;
		clipXY.y = -clipXY.y; // Flip Y for clip space

		float4 clipPos = float4(clipXY, 1.0, 1.0);
		float4 viewPos = mul(clipPos, ResolvedView.ClipToView);
		viewPos.xyz /= viewPos.w;

		// Transform view direction to world space
		float3 worldDir = normalize(mul(viewPos.xyz, (float3x3)ResolvedView.ViewToTranslatedWorld));

		// Scale down the camera origin for better framing
		float3 rayOrigin = cameraOrigin * 0.001;
		float3 rayDir = worldDir;
		
		// First pass: Cone march with subdivision factor of 12 (bundle ~12 pixels per cone)
		float subdivisionFactor = 12.0;
		MarchResult coneResult = MarchFractal(rayOrigin, rayDir, subdivisionFactor, 0.0, 0);
		
		// Second pass: Ray march from where cone marching left off (subdivisionFactor = 0 for precise marching)
		MarchResult finalResult = MarchFractal(rayOrigin, rayDir, 0.0, coneResult.distance, coneResult.steps);

		// Calculate color based on total steps taken
		float stepFactor = saturate(finalResult.steps / float(FRACTAL_MAX_STEPS));
		float t = sqrt(stepFactor);
		
		// Gradient color stops: position -> color
		float  almostBlackPos = 0.0;   float3 almostBlack = float3(0.0, 0.0, 0.05);    // Very few steps
		float  deepBluePos = 0.15;     float3 deepBlue = float3(0.05, 0.15, 0.3);      // Low detail areas
		float  vibrantBluePos = 0.4;   float3 vibrantBlue = float3(0.2, 0.4, 0.8);     // Medium detail
		float  brightBluePos = 1.0;    float3 brightBlue = float3(0.6, 0.8, 1.0);      // Many steps
		
		// Blend through gradient stops
		float range1 = saturate((t - almostBlackPos) / (deepBluePos - almostBlackPos));
		float range2 = saturate((t - deepBluePos) / (vibrantBluePos - deepBluePos));
		float range3 = saturate((t - vibrantBluePos) / (brightBluePos - vibrantBluePos));
		float3 fractalColor = lerp(lerp(lerp(almostBlack, deepBlue, range1), vibrantBlue, range2), brightBlue, range3);

		if (finalResult.hitStatus == HIT_STATUS_HIT)
		{
			// Direct hit: show fractal color
			return fractalColor;
		}
		else if (finalResult.hitStatus == HIT_STATUS_MISS_DISTANCE)
		{
			// Missed due to distance: blend fractal color with scene color based on steps taken
			float fogAmount = pow(stepFactor, 0.1);
			return lerp(sceneColor, fractalColor, fogAmount);
		}
		else if (finalResult.hitStatus == HIT_STATUS_MISS_STEPS)
		{
			// Missed due to max steps: show fractal color (TODO: Find a better way to handle this case, use depth?)
			return fractalColor;
		}
	}
};

// Usage in material custom node:
// #include "/Project/FractalMaterial.usf"
// FractalFunctions FF;
// return FF.RenderFractal(ScreenPosition, SceneColor).rgb;