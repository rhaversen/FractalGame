// Post-process mandelbulb fractal rendering shader functions for use in material custom node

struct FractalFunctions
{
	// Computes the world-space radius that a sphere must have to appear 1 pixel tall on screen at a given distance.
	static float GetPixelWorldRadius(float distance)
	{
		// This is derived from the projection formula: pixel_size = (world_radius / distance) * screen_height / tan(fov/2)
		// Solving for world_radius when pixel_size = 1 gives:
		return distance * ResolvedView.ClipToView._22 / ResolvedView.ViewSizeAndInvSize.y;
	}

	// Calculates the Distance Estimate (DE) for a point in space to the Mandelbulb set.
	// The DE is the radius of a sphere centered at 'pos' that is guaranteed not to touch the fractal.
	static float FractalDE(float3 pos, float Power)
	{
		float3 z = pos;
		float dr = 1.0;
		float r = 0.0;
		float bailout = 4.0;
		int MaxIter = 120; // A fixed max iteration count is sufficient here.

		for (int i = 0; i < MaxIter; i++)
		{
			r = length(z);
			if (r > bailout)
				break;

			// Spherical coordinates
			float theta = acos(z.z / r);
			float phi = atan2(z.y, z.x);
			dr = pow(r, Power - 1.0) * Power * dr + 1.0;

			// Scale and rotate
			float zr = pow(r, Power);
			theta *= Power;
			phi *= Power;

			z = zr * float3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
			z += pos;
		}

		return 0.5 * log(r) * r / dr;
	}

	// Performs the raymarching process to find an intersection with the fractal.
	// Returns: distance (positive = hit, negative = miss type: -1 = far, -2 = too much detail)
	static float RaymarchFractal(float3 RayOrigin, float3 RayDir, float Power, out int OutSteps)
	{
		float totalDist = 0.0;
		float maxDistance = 10.0;
		int maxSteps = 500;
		int steps = 0;

		while (totalDist < maxDistance)
		{
			steps++;
			float3 pos = RayOrigin + RayDir * totalDist;
			float distEstimate = FractalDE(pos, Power);

			// Define a precision threshold based on the pixel size at the current distance.
			// We are "close enough" when the distance estimate is a small fraction of a pixel's size.
			float currentPixelSize = GetPixelWorldRadius(totalDist);
			float precision = currentPixelSize * 0.1;

			if (distEstimate < precision)
			{
				OutSteps = steps;
				return totalDist; // Hit!
			}

			if (steps >= maxSteps)
			{
				OutSteps = steps;
				return -2.0; // Too much detail (likely grazing edge or fine structure)
			}

			// Advance the ray by the safe distance estimate, but enforce a minimum step size
			// relative to the current pixel size to prevent getting stuck near grazing surfaces.
			float adaptiveMinStep = currentPixelSize * 0.5;
			float stepSize = max(distEstimate, adaptiveMinStep);
			totalDist += stepSize;
		}
		OutSteps = steps;
		return -1.0; // Too far away
	}

	static float3 RenderFractal(float2 screenUV, float3 sceneColor)
	{
		// Get camera parameters
		float3 cameraOrigin = LWCHackToFloat(ResolvedView.WorldCameraOrigin);

		// Convert screen UV to clip space
		float2 clipXY = screenUV * 2.0 - 1.0;
		clipXY.y = -clipXY.y; // Flip Y for clip space

		float4 clipPos = float4(clipXY, 1.0, 1.0);
		float4 viewPos = mul(clipPos, ResolvedView.ClipToView);
		viewPos.xyz /= viewPos.w;

		// Transform view direction to world space
		float3 worldDir = normalize(mul(viewPos.xyz, (float3x3)ResolvedView.ViewToTranslatedWorld));

		// Scale down the camera origin for better framing
		float3 rayOrigin = cameraOrigin * 0.001;
		float3 rayDir = worldDir;

		float Power = 8.0;
		int steps;
		float dist = RaymarchFractal(rayOrigin, rayDir, Power, steps);

		// Calculate step-based color
		float stepFactor = saturate(steps / 500.0);
		float t = sqrt(stepFactor);
		
		// Gradient color stops: position -> color
		float  almostBlackPos = 0.0;   float3 almostBlack = float3(0.0, 0.0, 0.05);    // Very few steps
		float  deepBluePos = 0.15;     float3 deepBlue = float3(0.05, 0.15, 0.3);      // Low detail areas
		float  vibrantBluePos = 0.4;   float3 vibrantBlue = float3(0.2, 0.4, 0.8);     // Medium detail
		float  brightBluePos = 1.0;    float3 brightBlue = float3(0.6, 0.8, 1.0);      // Many steps
		
		// Blend through gradient stops
		float range1 = saturate((t - almostBlackPos) / (deepBluePos - almostBlackPos));
		float range2 = saturate((t - deepBluePos) / (vibrantBluePos - deepBluePos));
		float range3 = saturate((t - vibrantBluePos) / (brightBluePos - vibrantBluePos));
		float3 fractalColor = lerp(lerp(lerp(almostBlack, deepBlue, range1), vibrantBlue, range2), brightBlue, range3);

		if (dist > 0.0)
		{
			// Direct hit
			return fractalColor;
		}
		else if (dist == -2.0)
		{
			// Too much detail (grazing edge / fine structure)
			return fractalColor;
		}
		else if (dist == -1.0)
		{
			// Miss - fog intensity scales with step count (more steps = closer to fractal)
			float fogAmount = pow(stepFactor, 0.1);
			return lerp(sceneColor, fractalColor, fogAmount);
		}
		else
		{
			// Fallback (should not occur)
			return sceneColor;
		}
	}
};

// Usage in material custom node:
// #include "/Project/FractalMaterial.usf"
// FractalFunctions FF;
// return FF.RenderFractal(ScreenPosition, SceneColor).rgb;