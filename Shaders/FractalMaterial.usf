// Mandelbrot perturbation shader utilities

#define MANDELBROT_BAILOUT_SQ 4.0
#define MANDELBROT_W_LIMIT 1000000.0

struct MandelbrotPerturbationResult
{
	float3 Color;
	float SmoothIteration;
	float EscapeIteration;
	float InsideMask;
	float2 LastZ;
	float2 Perturbation;
};

struct MandelbrotPerturbationFunctions
{
	static float2 ComplexMul(float2 a, float2 b)
	{
		return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
	}

	static float MagnitudeSq(float2 value)
	{
		return dot(value, value);
	}

	static float3 EvaluateMandelbrotPalette(float t)
	{
		float3 a = float3(0.35, 0.22, 0.56);
		float3 b = float3(0.25, 0.35, 0.35);
		float3 c = float3(1.0, 0.9, 0.7);
		float3 d = float3(0.0, 0.33, 0.67);
		return a + b * cos(6.2831853 * (c * t + d));
	}

	static float2 ScreenPosToUV(float4 screenPos)
	{
		float wComponent = max(screenPos.w, 1.0e-6);
		return screenPos.xy / wComponent;
	}

	static MandelbrotPerturbationResult RenderMandelbrotPerturbation(
		float2 screenUV,
		float2 viewportCenter,
		float2 viewportScaleAspect,
		float2 referenceHi,
		float2 referenceLo,
		float maxIterations,
		Texture2D<float4> orbitTexture)
	{
		MandelbrotPerturbationResult result;
		result.Color = float3(1.0, 0.0, 1.0);
		result.SmoothIteration = 0.0;
		result.EscapeIteration = 0.0;
		result.InsideMask = 0.0;
		result.LastZ = float2(0.0, 0.0);
		result.Perturbation = float2(0.0, 0.0);

		if (maxIterations <= 0.0)
		{
			return result;
		}

		uint orbitWidth;
		uint orbitHeight;
		orbitTexture.GetDimensions(orbitWidth, orbitHeight);
		if (orbitWidth == 0u)
		{
			return result;
		}

		int orbitLength = min((int)maxIterations, (int)orbitWidth);
		if (orbitLength <= 0)
		{
			return result;
		}

		float aspect = viewportScaleAspect.y > 0.0 ? viewportScaleAspect.y : (ResolvedView.ViewSizeAndInvSize.x * ResolvedView.ViewSizeAndInvSize.w);
		float2 scale = float2(viewportScaleAspect.x, viewportScaleAspect.x * aspect);
		float2 planePoint = viewportCenter + (screenUV - 0.5) * scale;

		float2 deltaC = (planePoint - referenceHi) - referenceLo;

		float2 w = float2(0.0, 0.0);
		float2 zPerturbed = referenceHi;
		float smoothIter = (float)orbitLength;
		float escapeIter = (float)orbitLength;
		bool escaped = false;

		[loop]
		for (int iter = 0; iter < orbitLength; ++iter)
		{
			float4 orbitSample = orbitTexture.Load(int3(iter, 0, 0));
			float2 zRef = orbitSample.xy;
			float2 dzdc = orbitSample.zw;

			float2 perturbation = ComplexMul(dzdc, deltaC) + w;
			float2 z = zRef + perturbation;
			zPerturbed = z;

			float magSq = MagnitudeSq(z);
			if (magSq > MANDELBROT_BAILOUT_SQ)
			{
				escaped = true;
				escapeIter = (float)iter;
				float magnitude = sqrt(magSq);
				float safeLog = max(1.0e-6, log(max(1.0000001, magnitude)));
				smoothIter = (float)iter + 1.0 - log2(safeLog);
				break;
			}

			float2 wSquared = ComplexMul(w, w);
			float2 twoZRef = zRef * 2.0;
			w = ComplexMul(twoZRef, w) + wSquared + deltaC;

			float maxComponent = max(abs(w.x), abs(w.y));
			if (maxComponent > MANDELBROT_W_LIMIT)
			{
				// Indicates the perturbation drifted too far from the reference orbit.
				return result;
			}
		}

		float escapedMask = escaped ? 1.0 : 0.0;
		float normalized = smoothIter / max((float)orbitLength, 1.0);
		normalized = saturate(normalized);
		float3 palette = EvaluateMandelbrotPalette(normalized);
		float3 interiorColor = float3(0.02, 0.02, 0.05);

		result.Color = lerp(interiorColor, palette, escapedMask);
		result.SmoothIteration = smoothIter;
		result.EscapeIteration = escapeIter;
		result.InsideMask = 1.0 - escapedMask;
		result.LastZ = zPerturbed;
		result.Perturbation = w;
		return result;
	}

	static float3 RenderMandelbrotPerturbationColor(
		float2 screenUV,
		float2 viewportCenter,
		float2 viewportScaleAspect,
		float2 referenceHi,
		float2 referenceLo,
		float maxIterations,
		Texture2D<float4> orbitTexture)
	{
		MandelbrotPerturbationResult result = RenderMandelbrotPerturbation(screenUV, viewportCenter, viewportScaleAspect, referenceHi, referenceLo, maxIterations, orbitTexture);
		return result.Color;
	}

	static float4 RenderMandelbrotPerturbationPacked(
		float2 screenUV,
		float2 viewportCenter,
		float2 viewportScaleAspect,
		float2 referenceHi,
		float2 referenceLo,
		float maxIterations,
		Texture2D<float4> orbitTexture)
	{
		MandelbrotPerturbationResult result = RenderMandelbrotPerturbation(screenUV, viewportCenter, viewportScaleAspect, referenceHi, referenceLo, maxIterations, orbitTexture);
		return float4(result.Color, result.SmoothIteration);
	}
};

// Usage in material custom node:
// #include "/Project/FractalMaterial.usf"
// MandelbrotPerturbationFunctions PF;
// float2 uv = PF.ScreenPosToUV(ScreenPosition);
// return PF.RenderMandelbrotPerturbationColor(uv, ViewportCenter.rg, ViewportScaleAspect.rg, ReferenceHi.rg, ReferenceLo.rg, MaxIterations, OrbitTexture);
//
// Custom node inputs (in order):
// 1. ScreenPosition (float4) - from ScreenPosition node (will be converted to UV)
// 2. ViewportCenter (float4) - from Vector Parameter "ViewportCenter"
// 3. ViewportScaleAspect (float4) - from Vector Parameter "ViewportScaleAspect"
// 4. ReferenceHi (float4) - from Vector Parameter "ReferenceHi"
// 5. ReferenceLo (float4) - from Vector Parameter "ReferenceLo"
// 6. MaxIterations (float) - from Scalar Parameter "MaxIterations"
// 7. OrbitTexture (Texture2D) - from Texture Object Parameter "OrbitTexture"
//
// For the legacy Mandelbulb ray marching implementation, include "/Project/OldFractalMaterial.usf".